The JavaScript SDK for Metaverse5G
GitHub npm (scoped)

Explore the Docs »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

Examples · API Reference · NPM Package · GitHub

# Metaverse.js a JavaScript SDK for writing applications that interact with the Metaverse5G blockchain from either Node.js, browser, or React Native environments and provides simple abstractions over core data structures, serialization, key management, and API request generation.

# Features
Written in TypeScript, with type definitions
Versatile support for key management solutions
Works in Node.js, in the browser, and React Native
Exposes the Terra API through LCDClient
Parses responses into native JavaScript types
We highly suggest using Metaverse.js with TypeScript, or JavaScript in a code editor that has support for type declarations, so you can take advantage of the helpful type hints that are included with the package.

Table of Contents
API Reference
Getting Started
Requirements
Installation
Dependencies
Tests
Code Quality
Usage Examples
Getting Blockchain Information
Async Usage
Building and Signing Transactions
Example Using a Wallet
Contributing
Reporting an Issue
Requesting a Feature
Contributing Code
Documentation Contributions
License

API Reference
An intricate reference to the APIs on the Metaverse5G SDK can be found here.


Getting Started
A walk-through of the steps to get started with the Metaverse5G SDK alongside a few use case examples are provided below. Alternatively, a tutorial video is also available here as reference.

Requirements
Terra SDK requires Python v3.7+

# Installation
Grab the latest version off NPM:

npm install @Metaverse5G-money/metaverse5G.js
Usage
#Metaverse5G.js can be use in Node.js, as well as inside the browser. Please check the docs for notes on how to get up and running.

# Getting blockchain data
import { LCDClient, Coin } from '@metaverse5G-money/metaverse5G.js';

// connect to bombay testnet
const metaverse5G = new LCDClient({
  URL: 'https://bombay-lcd.Metaverse5G.dev',
  chainID: 'bombay-12',
});

// To use LocalMetaverse5G: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
// const terra = new LCDClient({
//   URL: 'http://localhost:1317',
//   chainID: 'localmetaverse5G'
// });

// get the current swap rate from 1 Metaverse5GUSD to Metaverse5GKRW
const offerCoin = new Coin('uusd', '1000000');
metaverse5G.market.swapRate(offerCoin, 'ukrw').then(c => {
  console.log(`${offerCoin.toString()} can be swapped for ${c.toString()}`);
});
#Broadcasting transactions
First, get some testnet tokens for Metaverse5G, or use LocalMetaverse5G.

import { LCDClient, MsgSend, MnemonicKey } from '@metaverse5G-money/metaverse.js';

// create a key out of a mnemonic
const mk = new MnemonicKey({
  mnemonic:
    'notice oak worry limit wrap speak medal online prefer cluster roof addict wrist behave treat actual wasp year salad speed social layer crew genius',
});

// connect to bombay testnet
const metaverse5G = new LCDClient({
  URL: 'https://bombay-lcd.metaverse5G.dev',
  chainID: 'bombay-12',
});

// To use LocalMetaverse5G
// const terra = new LCDClient({
//   URL: 'http://localhost:1317',
//   chainID: 'localmetaverse5G'
// });

// a wallet can be created out of any key
// wallets abstract transaction building
const wallet = metaverse5G.wallet(mk);

// create a simple message that moves coin balances
const send = new MsgSend(
  'Metaverse5G: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',
  'Metaverse5G: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',
  { uluna: 1000000, ukrw: 1230201, uusd: 1312029 }
);

# wallet
  .createAndSignTx({
    msgs: [send],
    memo: 'test from Metaverse5G.js!',
  })
  .then(tx => Metaverse5G.tx.broadcast(tx))
  .then(result => {
    console.log(`TX hash: ${result.txhash}`);
  });
# Metaverse.js in the browser
You can access all the objects of the @metaverse5G-money/metaverse5G.js from the global Metaverse object if you load Metaverse5G.js with a <script> tag.

# Include the following in your browser:

<script
  crossorigin
  src="https://unpkg.com/@metaverse5G-money/metaverse5G.js/dist/bundle.js"
></script>
You can find a small JSFiddle example that refreshes current Oracle votes here.

# Metaverse5G.js in React Native
In order to use Metaverse5G.js inside React Native, you need to add the node-libs-react-native package and react-native-get-random-values package to your React Native app's package.json.

yarn add node-libs-react-native react-native-get-random-values
You will need to register Node.js native modules in an entry point of your application, such as index.tsx:

import 'node-libs-react-native/globals';
import 'react-native-get-random-values';
Also, add resolvers to your metro.config.js

module.exports {
  // ...
  resolver: {
    // ...
    extraNodeModules: require('node-libs-react-native'),
  },
  // ...
}
# License
This software is licensed under the MIT license. See LICENSE for full disclosure
